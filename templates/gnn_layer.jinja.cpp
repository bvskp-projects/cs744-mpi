//
// Autogenerated file!
//

#include "nn/layers/gnn/{{layer_class_name}}.h"

#include "nn/layers/gnn/layer_helpers.h"
#include "reporting/logger.h"
#include "nn/initialization.h"

//* Generate the constructor
{{LayerClassName}}::{{LayerClassName}}(shared_ptr<LayerConfig> layer_config, torch::Device device) {
    config_ = layer_config;
    options_ = std::dynamic_pointer_cast<{{LayerClassName}}Options>(config_->options);
    input_dim_ = config_->input_dim;
    output_dim_ = config_->output_dim;
    device_ = device;

    //* Generate local variable declarations
    {%- for name, var_type in init.local_vars -%}
    {{var_type}} {{name}};
    {%- endfor -%}

    {{init.body}}
}

void {{LayerClassName}}::reset() {
    //* Generate local variable declarations
    {%- for name, var_type in reset.local_vars -%}
    {{var_type}} {{name}};
    {%- endfor -%}

    {{reset.body}}

    if (config_->bias) {
        init_bias();
    }
}

torch::Tensor {{LayerClassName}}::forward(torch::Tensor inputs, DENSEGraph dense_graph, bool train) {
    //* Generate local variable declarations
    {%- for name, var_type in reset.local_vars -%}
    {{var_type}} {{name}};
    {%- endfor -%}

    {{forward.body}}
}

//* Generate all member functions
{%- for fn in member_fns -%}
{{fn.returns}} {{LayerClassName}}::{{fn.name}}({{fn.args|join(', ')}}) {
    //* Generate local variable declarations
    {%- for name, var_type in fn.local_vars -%}
    {{var_type}} {{name}};
    {%- endfor -%}

    {{fn.body}}
}
{%- endfor -%}
